package main

import (
	"encoding/csv"
	"github.com/cvila84/erpdump/internal/erp"
	"github.com/cvila84/erpdump/pkg/utils"
	"log"
	"os"
)

type Filter interface {
	filter()
}

// ProjectTimes = EmployeesTimes.filter(EmployeeList).filter(ProjectFilter).filter(PeriodFilter)
// EmployeeList generated by []Manager / []Person

func readCsvFile(filePath string) [][]string {
	f, err := os.Open(filePath)
	if err != nil {
		log.Fatal("Unable to read input file "+filePath, err)
	}
	defer f.Close()

	csvReader := csv.NewReader(f)
	csvReader.Comma = ';'
	records, err := csvReader.ReadAll()
	if err != nil {
		log.Fatal("Unable to parse file as CSV for "+filePath, err)
	}

	return records
}

func main() {
	records := readCsvFile("./erp2022.csv")
	employeesTimes := &utils.Vector[erp.EmployeeTimes]{ID: func(element erp.EmployeeTimes) string { return string(element.Name) }}
	employees := &utils.Vector[erp.Person]{ID: func(element erp.Person) string { return string(element) }}
	managers := &utils.Vector[erp.Person]{ID: func(element erp.Person) string { return string(element) }}
	projects := &utils.Vector[erp.Project]{ID: func(element erp.Project) string { return element.Name }}
	for i, record := range records {
		if i > 0 {
			managers.Add(erp.Person(record[0]))
			employees.Add(erp.Person(record[1]))
			project, ok := projects.Get(record[9])
			if !ok {
				project := erp.NewProject(record[9])
				projects.Add(project)
			}
			project.AddTask(record[10])
			employeeTime, ok := employeesTimes.Get(record[1])
			if !ok {
				employeeTime = erp.EmployeeTimes{Name: erp.Person(record[1])}
				employeesTimes.Add(employeeTime)
			}
			month, hours1, hours2, err := utils.MonthlyHours(record)
			if err != nil {
				panic(err)
			}
			//			fmt.Printf("Record %d | %s | %s | %s | %s | %v | %d | %.2f | %.2f\n", i, record[1], record[9], record[10], record[6], hours, month, hours1, hours2)
			employeeTime.Add(record[9], record[10], month, hours1, hours2)
		}
	}
}
